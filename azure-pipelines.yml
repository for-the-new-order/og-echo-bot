trigger:
    - master
    - azure-pipelines

pool:
    name: Hosted Ubuntu 1604

variables:
    bot.image: 'carlhugo/ogechobot'
    bot.imageName: 'ogechobot'
    bot.sshEndpoint: 'Google Cloud Bots'
    bot.dockerRegistryEndpoint: 'Docker Hub'
    bot.envFile: 'ogechobot.env'

steps:
    - bash: |
          PACKAGE_VERSION=$(grep '"version":' package.json | cut -d\" -f4)
          echo "##vso[build.updatebuildnumber]$PACKAGE_VERSION"
      displayName: 'Update Build Number'

    - task: Docker@1
      displayName: 'Build an image'
      inputs:
          containerregistrytype: 'Container Registry'
          dockerRegistryEndpoint: $(bot.dockerRegistryEndpoint)
          imageName: '$(bot.image):$(Build.BuildNumber)'
      enabled: true

    - task: Docker@1
      displayName: 'Push an image'
      inputs:
          containerregistrytype: 'Container Registry'
          dockerRegistryEndpoint: $(bot.dockerRegistryEndpoint)
          command: 'Push an image'
          imageName: '$(bot.image):$(Build.BuildNumber)'
      enabled: true

    - task: DownloadSecureFile@1
      name: environment
      displayName: 'Download secure file'
      inputs:
          secureFile: $(bot.envFile)

    - bash: 'cp $(environment.secureFilePath) $(Build.SourcesDirectory)/$(bot.envFile)'
      displayName: 'Bash Script'
      enabled: true

    - bash: |
        echo "secureFilePath: $(environment.secureFilePath)"
        echo "destination: $(Build.SourcesDirectory)/$(bot.envFile)"
      displayName: 'Echo secure file 1'
      enabled: false

    - script: |
        echo "secureFilePath: $(environment.secureFilePath)"
        echo "destination: $(Build.SourcesDirectory)/$(bot.envFile)"
      displayName: 'Echo secure file 2'
      enabled: false

    - task: CopyFilesOverSSH@0
      displayName: 'Securely copy files to the remote machine'
      inputs:
          sshEndpoint: $(bot.sshEndpoint)
          sourceFolder: '$(Build.SourcesDirectory)'
          contents: $(bot.envFile)
          failOnEmptySource: true
      enabled: true

    - task: SSH@0
      displayName: 'Run shell inline on remote machine'
      inputs:
          sshEndpoint: $(bot.sshEndpoint)
          commands: |
              # Pull the new image
              docker pull "$(bot.image):$(Build.BuildNumber)"
              
              # Stop the running container
              (docker ps | grep $(bot.imageName)) && docker kill $(docker ps | grep $(bot.imageName) | cut -c 1-12)
              
              # Run the new image
              docker run --restart=always -d "$(bot.image):$(Build.BuildNumber)"
              
              # Cleanup
              docker system prune -f -a
      enabled: true